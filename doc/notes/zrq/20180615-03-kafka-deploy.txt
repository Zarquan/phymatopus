#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Create an external VM to work with.
#[user@trop]

    createvm

        INFO : Node name [Etalema]
        INFO : Base name [fedora-27-docker-base-20180129.qcow]
        INFO : Base path [/var/lib/libvirt/images/base/fedora-27-docker-base-20180129.qcow]
        INFO : Disc name [Etalema.qcow]
        INFO : Disc size [16GiB]

        INFO : MAC  [52:54:00:02:03:09]
        INFO : IPv4 [192.168.203.9]
        INFO : IPv6 []

# -----------------------------------------------------
# Login to our external VM.
#[user@trop]

    ssh Etalema

    # -----------------------------------------------------
    # Configure our secrets function.
    #[user@virtual]

        mkdir "${HOME}/bin"
        pushd "${HOME}/bin"

            cat > "secret" << 'EOF'
....
....
EOF

            chmod u=rwx,og= "secret"
        popd

        secret frog

    # -----------------------------------------------------
    # Configure our OpenStack settings.
    # https://horizon.ecdf.ed.ac.uk/dashboard/project/access_and_security/api_access/openrc/
    #[user@virtual]

        cat > "${HOME}/openstack.settings" << EOF

export OS_INTERFACE=public
export OS_IDENTITY_API_VERSION=3

export OS_AUTH_URL=https://keystone.ecdf.ed.ac.uk/v3

export OS_USER_DOMAIN_NAME="ed"
export OS_REGION_NAME="Edinburgh"

export OS_USERNAME=$(secret openstack.user)
export OS_PASSWORD=$(secret openstack.pass)

export OS_PROJECT_ID=fcef6dd450f64a1ab4ffa5a7234c4161
export OS_PROJECT_NAME=lsst

EOF

    # -----------------------------------------------------
    # Create a container to work with.
    #[user@virtual]

        docker run \
            --rm \
            --tty \
            --interactive \
            --hostname openstacker \
            --env SSH_AUTH_SOCK=/tmp/ssh_auth_sock \
            --volume "${HOME}/openstack.settings:/etc/phymatopus/openstack.settings" \
            --volume ${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock \
            phymatopus/openstack-client \
            bash

        # -----------------------------------------------------
        # Load our OpenStack settings.
        #[root@openstacker]

            source '/etc/phymatopus/openstack.settings'

        # -----------------------------------------------------
        # Load our OpenStack and Eleanor functions.
        #[root@openstacker]

            source openstack-utils.sh
            source eleanor-utils.sh
            source eleanor-init.sh

        # -----------------------------------------------------
        # Initialize our cluster settings.
        #[root@openstacker]

if [ ! -e '/etc/phymatopus/cluster.settings' ]
then
    cat > '/etc/phymatopus/cluster.settings' << EOF

    phym_userkey=dmr
    phym_project=Raminiara

    phym_image=\${fedora27:?}
    phym_flavor=\${m1small:?}

    sshuser=Stevedore
    sshopts=(
        '-q'
        '-A'
        '-o CheckHostIP=no'
        '-o UserKnownHostsFile=/dev/null'
        '-o StrictHostKeyChecking=no'
        )

EOF
fi

        # -----------------------------------------------------
        # Load our project settings.
        #[root@openstacker]

            source '/etc/phymatopus/cluster.settings'

        # -----------------------------------------------------
        # Create our controller instance.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating controller node.

EOF

            controlvm=$(makevm "control")

        # -----------------------------------------------------
        # Assign a floating IP addresess to our controller.
        #[root@openstacker]

            controlip=$(
                addinternalfloat "${controlvm:?}"
                )

echo << EOF
Control VM [${controlvm:?}]
Control IP [${controlip:?}]

EOF

        # -----------------------------------------------------
        # Test login to our control node.
        #[root@openstacker]

            ssh ${sshopts[*]} "${sshuser:?}@${control:?}" '
                hostname
                '

        # -----------------------------------------------------
        # Build the ssh proxy command.
        #[root@openstacker]

            sshproxy="ssh ${sshopts[*]} ${sshuser}@${controlip} nc %h %p"

        # -----------------------------------------------------
        # Using mc in ssh proxy command throws an error "bash: nc: command not found"
        # Install 'nc' on the controller to enable it to act as a ssh proxy.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Installing nmap-ncat on controller node.

EOF

            ssh ${sshopts[*]} "${sshuser:?}@${controlip:?}" '
                sudo dnf install -y nc
                '

                Installed:
                  nmap-ncat.x86_64 2:7.60-8.fc27

        # -----------------------------------------------------
        # Create our Zookeeper instances.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating Zookeeper nodes.

EOF

            unset zkidents
            zkidents=()

            for i in {0..2}
            do
                echo "Node [${i}]"
                zkidents+=(
                    "$(makevm "zookeeper-${i}")"
                    )
            done


        # -----------------------------------------------------
        # Test internal login to each of our Zookeeper nodes.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Testing internal access to Zookeeper nodes.

EOF

            for vmident in ${zkidents[@]}
            do
                getvminfo "${vmident:?}"

echo << EOF
Node    [${vmident}]
Name    [$(getvmname)]
Address [$(geteleanor192)]

EOF

                echo "
                    hostname
                    " \
                    | ssh \
                        ${sshopts[*]} \
                        -o ProxyCommand="${sshproxy}" \
                        "${sshuser:?}@$(geteleanor192)"
            done

        # -----------------------------------------------------
        # Build a list of lists of zookeeper addresses.
        # The address for this server should be 0.0.0.0 to make zookeeper
        # listen on all interfaces for inter zookeeper communications.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Generating Zookeeper listener lists.

EOF

            unset zkservers
            zkservers=()
                
            for vmident in ${zkidents[@]}
            do

                getvminfo "${vmident:?}"
                internalip=$(geteleanor192)

echo << EOF
Node    [${vmident}]
Name    [$(getvmname)]
Address [${internalip}]

EOF

                zkservers+=(${internalip:?})

            done

            unset zkserverlists
            zkserverlists=()

            for i in {!zkservers[@]}
            do

                delim=''
                ports=':2888:3888'
                zkserverlist=''
                for j in ${!zkservers[@]} 
                do
                    if [[ $i -eq $j ]]
                    then
                        server="0.0.0.0"
                    else
                        server=${zkservers[${j}]}
                    fi
                    zkserverlist=${zkserverlist}${delim}${server}${ports}
                    delim=';'
                done
                zkserverlists+=(${zkserverlist})
            done

            for i in {!zkserverlists[@]}
            do
echo << EOF
Ident [${i}]
List   [${zkserverlists[${i}]}]

EOF
            done

        # -----------------------------------------------------
        # Create our Zookeeper deploy script.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating Zookeeper deploy script.

EOF

        cat > /tmp/zookeeper-init.sh << 'EOSH'

    cat > zookeeper.yml << EOYL

version: '3'

networks:
    zookeeper:
    
volumes:
    zklog:
    zkdata:
    
services:

    courtney:
        image:
            confluentinc/cp-zookeeper:4.1.1
        ports:
            - "2181:2181"
            - "2888:2888"
            - "3888:3888"
        environment:
            - ZOOKEEPER_SERVER_ID=${ZOOKEEPER_SERVER_ID}
            - ZOOKEEPER_SERVERS=${ZOOKEEPER_SERVERS}
            - ZOOKEEPER_TICK_TIME=2000
            - ZOOKEEPER_INIT_LIMIT=5
            - ZOOKEEPER_SYNC_LIMIT=2
            - ZOOKEEPER_CLIENT_PORT=2181
            - ZOOKEEPER_CLIENT_PORT_ADDRESS=0.0.0.0
        volumes:
            - "zklog:/var/lib/zookeeper/log"
            - "zkdata:/var/lib/zookeeper/data"
        networks:
            - zookeeper

EOYL

    echo "---- ----"

    docker-compose \
        --file zookeeper.yml \
        up -d

    echo "---- ----"
    
EOSH

        # -----------------------------------------------------
        # Login and run our init script on each node.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Executing Zookeeper deploy script.

EOF

            for i in ${!zkidents[@]}
            do
                echo "---- ---- ---- ----"
                vmident=${zkidents[$i]}
                getvminfo "${vmident:?}"

                internalip=$(geteleanor192)

echo << EOF
Index   [${i}]
Ident   [${vmident}]
Name    [$(getvmname)]
Address [${internalip}]
EOF
                echo "
                    export ZOOKEEPER_SERVER_ID=$(($i+1))
                    export ZOOKEEPER_SERVERS=${zkserverlists[${i}]}
                " \
                | cat - /tmp/zookeeper-init.sh \
                | ssh \
                    ${sshopts[*]} \
                    -o ProxyCommand="${sshproxy}" \
                    ${sshuser:?}@${internalip:?}

        done

        # -----------------------------------------------------
        # Create our Kafka instances.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating Kafka nodes.

EOF

            unset kfidents
            kfidents=()

            for i in {0..3}
            do
                echo "Node [${i}]"
                kfidents+=(
                    "$(makevm \
                        "kafka-${i}" \
                        "${m1medium}"
                        )"
                    )
            done

        # -----------------------------------------------------
        # Assign floating IP addresess to each of our Kafka nodes.
        #[root@openstacker]

            echo << EOF
---- ---- ---- ---- ----
Adding floating IP addresses to Kafka nodes.

EOF

            for ident in ${kfidents[@]}
            do
                getvminfo "${ident:?}"

                floating=$(
                    addinternalfloat "${ident:?}"
                    )

echo << EOF
Address [${floating}]

EOF

            done

        # -----------------------------------------------------
        # Create our Kafka security group.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating Kafka security group.

EOF

            openstack \
                security group \
                create \
                --format json \
                --description "Kafka broker service" \
                "${phym_project}-kafka" \
                | jq '.' \
                > /tmp/security-info.json

            groupid=$(
                jq -r "
                    .id
                    " /tmp/security-info.json
                )

echo << EOF
Adding Kafka security rules.
EOF

            openstack \
                security group rule \
                create \
                --format json \
                --description "Kafka broker ipv4" \
                --ingress \
                --protocol  'tcp' \
                --ethertype 'IPv4' \
                --remote-ip '0.0.0.0/0' \
                --dst-port  '9092' \
                "${groupid}" \
                | jq '.'

            openstack \
                security group rule \
                create \
                --format json \
                --description "Kafka broker ipv6" \
                --ingress \
                --protocol  'tcp' \
                --ethertype 'IPv6' \
                --remote-ip '::/0' \
                --dst-port  '9092' \
                "${groupid}" \
                | jq '.'

        # -----------------------------------------------------
        # Remove the default egress rules ?

echo << EOF
Removing default security rules.
EOF

            for ident in $(
                openstack \
                    security group \
                    rule list \
                    --format json \
                    "${groupid}" \
                | jq -r '.[] | select((."IP Protocol" == null) and (."IP Range" == null)) | .ID'
                )
                do
                    openstack \
                        security group rule \
                        delete \
                        "${ident}"
                done

        # -----------------------------------------------------
        # Add the security group to our Kafka nodes.
        #[root@openstacker]

echo << EOF

---- ---- ---- ---- ----
Adding Kafka security group to Kafka nodes.

EOF

            for ident in ${kfidents[@]}
            do
                getvminfo "${ident:?}"
                openstack \
                    server add security group \
                    "${ident:?}" \
                    "${groupid}"
            done

        # -----------------------------------------------------
        # Test internal login to each of our Kafka nodes.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Testing internal access to Kafka nodes.

EOF

            for vmident in ${kfidents[@]}
            do
                echo "---- ---- ---- ----"
                getvminfo "${vmident:?}"

echo << EOF
Node    [${vmident}]
Name    [$(getvmname)]
Address [$(geteleanor192)]

EOF

                echo "
                    hostname
                    " \
                    | ssh \
                        ${sshopts[*]} \
                        -o ProxyCommand="${sshproxy}" \
                        "${sshuser:?}@$(geteleanor192)"
            done

        # -----------------------------------------------------
        # Test external login to each of our Kafka nodes.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Testing external access to Kafka nodes.

EOF

            for vmident in ${kfidents[@]}
            do
                echo "---- ---- ---- ----"
                getvminfo "${vmident:?}"

echo << EOF
Node    [${vmident}]
Name    [$(getvmname)]
Address [$(geteleanor172)]

EOF

                echo "
                    hostname
                    " \
                    | ssh \
                        ${sshopts[*]} \
                        "${sshuser:?}@$(geteleanor172)"
            done

        # -----------------------------------------------------
        # Create our volume mount script.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating data volume config script.

EOF

            cat > /tmp/volume-init.sh << 'EOSH'

#---------------------------------------------------------------------
# Create a filesystem on the new device.

echo ""
echo "Creating filesystem"

mkfs.btrfs \
    "${voldevice:?}"

echo ""
echo "Checking filesystem"

btrfs \
    filesystem show \
    "${voldevice:?}"

#---------------------------------------------------------------------
# Create our mount point.

echo ""
echo "Creating mount point"

mkdir -p "${volpath:?}/${volname:?}"
touch "${volpath:?}/mount-failed"

#---------------------------------------------------------------------
# Add the volume to our FileSystemTABle.
# https://www.howtoforge.com/reducing-disk-io-by-mounting-partitions-with-noatime

echo ""
echo "Updating fstab"

fsuuid=$(
    lsblk --noheadings --output UUID "${voldevice:?}"
    )

cat >> /etc/fstab << EOTAB
UUID=${fsuuid:?} ${volpath:?}/${volname:?}    btrfs    defaults,noatime    0  0
EOTAB

#---------------------------------------------------------------------
# Mount the new volume.

echo ""
echo "Mounting new filesystem"

mount "${volpath:?}/${volname:?}"

#---------------------------------------------------------------------
# Check the new volume.

echo ""
echo "Checking new filesystem"

df -h "${volpath:?}/${volname:?}"

lsblk

EOSH

        # -----------------------------------------------------
        # Data volume settings.
        #[root@openstacker]

            volsize=512

            voldevices=(
                '/dev/vdb'
                '/dev/vdc'
                )
            volnames=(
                'data-00'
                'data-01'
                )

            innerpath=/var/local/inner/kafka
            outerpath=/var/local/outer/kafka

        # -----------------------------------------------------
        # Create and attach a new volume to each of our Kafka nodes.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating Kafka data volumes.

EOF

            for vmident in ${kfidents[@]}
            do

                getvminfo "${vmident:?}"

echo << EOF
Node   [${vmident}]
Name   [$(getvmname)]

EOF

                for i in ${!voldevices[*]}
                do
                
                    volname=${volnames[$i]}
                    volpath=${outerpath}/${volname}
                    voldevice=${voldevice[$i]}

echo << EOF
Device [${voldevice}]
Target [${volpath}]

EOF

                    volident=$(
                        makevolume \
                           "$(getvmname)-${volname:?}" \
                           "${volsize:?}" 
                        )

                    openstack \
                        server add volume \
                        "${vmident:?}" \
                        "${volident:?}" \
                        --device "${voldevice:?}"

                    echo "
                        sudo -s
                        export voldevice=${voldevice:?}
                        export volpath=${volpath:?}
                        export volname=${volname:?}
                        " \
                        | cat - /tmp/volume-init.sh \
                        | ssh ${sshopts[*]} \
                            -o ProxyCommand="${sshproxy}" \
                            "${sshuser:?}@$(geteleanor192)" \

                done
            done

    # -----------------------------------------------------
    # Build a list of data volumes.
    #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Generating Kafka log directories list.

EOF

        delim=''
        logdirs=''
        for name in ${volumes[@]}
        do
            logdirs=${logdirs}${delim}${innerpath}/${name}
            delim=','
        done

        echo "Logdirs [${logdirs}]"
        
    # -----------------------------------------------------
    # Create our deploy script.
    #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating Kafka deploy script.

EOF

cat > /tmp/kafka-init.sh << 'EOSH'

    cat > kafka.yml << 'EOYL'

version: "3.2"

networks:
    kafka:
    
services:

    emily:
        image:
            confluentinc/cp-kafka:4.1.1
        ports:
            - "9092:9092"
        environment:
            - KAFKA_LOG_DIRS=${KAFKA_LOG_DIRS}
            - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
            - KAFKA_BROKER_RACK=${KAFKA_BROKER_RACK}
            - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
            - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
            - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${externalip}:9092
            - KAFKA_NUM_PARTITIONS=16
            - KAFKA_DEFAULT_REPLICATION_FACTOR=3
            - KAFKA_LOG_RETENTION_MS=-1
            - KAFKA_LOG_RETENTION_BYTES=-1
            - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
            - KAFKA_MESSAGE_MAX_BYTES=10485760
        volumes:
            - type:   "bind"
              source: "${outerpath}/data-00"
              target: "${innerpath}/data-00"
            - type:   "bind"
              source: "${outerpath}/data-01"
              target: "${innerpath}/data-01"
        networks:
            - kafka

EOYL

    echo "---- ----"

    docker-compose \
        --file kafka.yml \
        up -d

    echo "---- ----"
    
EOSH

    # -----------------------------------------------------
    # Login and run our init script on each node.
    #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Executing Kafka deploy script.

EOF

        for i in ${!kfidents[@]}
        do

            vmident=${kfidents[$i]}
            getvminfo "${vmident:?}"

echo << EOF
Node  [${i}]
Ident [${vmident}]
Name  [$(getvmname)]
EOF

            internalip=$(geteleanor192)
            externalip=$(geteleanor172)

echo << EOF
Internal [${internalip}]
External [${externalip}]

EOF
            echo "
                cat > kafka.env << EOF
KAFKA_LOG_DIRS=${logdirs:?}
KAFKA_BROKER_ID=$(($i+1))
KAFKA_BROKER_RACK=$(($i+1))
KAFKA_ZOOKEEPER_CONNECT=${zkconnect:?}

internalip=${internalip}
externalip=${externalip}
innerpath=${innerpath:?}
outerpath=${outerpath:?}
EOF
                ln -sf kafka.env .env
                " \
                | cat - /tmp/kafka-init.sh \
                | ssh \
                    ${sshopts[*]} \
                    -o ProxyCommand="${sshproxy}" \
                    ${sshuser:?}@${internalip:?}
        done



        # -----------------------------------------------------
        # Create our MirrorMaker instances.
        #[root@openstacker]

echo << EOF
---- ---- ---- ---- ----
Creating MirrorMaker nodes.

EOF

            unset mmidents
            mmidents=()

            for i in {0..3}
            do
                echo "Node [${i}]"
                mmidents+=(
                    "$(makevm "mirror-${i}")"
                    )
            done












# -----------------------------------------------------
# Login and tail the Zookeeper logs.
#[root@openstacker]

    ssh trop03
        ssh Etalema
            ssh -A 172.16.49.46
                ssh -A 192.168.1.xx
                ssh -A 192.168.1.xx
                ssh -A 192.168.1.xx

                    docker logs -f stevedore_courtney_1


# -----------------------------------------------------
# Login and tail the Kafka logs.
#[root@openstacker]

    ssh trop03
        ssh Etalema
            ssh -A 172.16.49.46
                ssh -A 192.168.1.xx
                ssh -A 192.168.1.xx
                ssh -A 192.168.1.xx
                ssh -A 192.168.1.xx

                    docker logs -f stevedore_emily_1


